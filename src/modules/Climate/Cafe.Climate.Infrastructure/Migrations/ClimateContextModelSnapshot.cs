// <auto-generated />
using System;
using Cafe.Climate.Infrastructure.EFcore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cafe.Climate.Infrastructure.Migrations
{
    [DbContext(typeof(ClimateContext))]
    partial class ClimateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.Arduino", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MonitoringId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Occupied")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringId")
                        .IsUnique()
                        .HasFilter("[MonitoringId] IS NOT NULL");

                    b.ToTable("Arduinos");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.ArduinoData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Altitude")
                        .HasColumnType("float");

                    b.Property<string>("ArduinoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Humididy")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArduinoId");

                    b.ToTable("ArduinoDatas");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.ClimaticFactor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitoringId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringId");

                    b.ToTable("ClimaticFactor");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClimaticFactor");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.Crop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoffeeGrowerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClimateCrop");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.Monitoring", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CropId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CropId")
                        .IsUnique()
                        .HasFilter("[CropId] IS NOT NULL");

                    b.ToTable("ClimateMonitoring");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.TemperatureInceptThreshold", b =>
                {
                    b.HasBaseType("Cafe.Climate.Domain.Entities.ClimaticFactor");

                    b.Property<double>("MaximunDevelopmentThreshold")
                        .HasColumnType("float");

                    b.Property<double>("MinimunDevelopmentThreshold")
                        .HasColumnType("float");

                    b.Property<string>("OptimalStateDevelopmentThreshold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OptimalTemperatureDevelopmentThreshold")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("TemperatureInceptThreshold");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.Arduino", b =>
                {
                    b.HasOne("Cafe.Climate.Domain.Entities.Monitoring", "Monitoring")
                        .WithOne("Arduino")
                        .HasForeignKey("Cafe.Climate.Domain.Entities.Arduino", "MonitoringId");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.ArduinoData", b =>
                {
                    b.HasOne("Cafe.Climate.Domain.Entities.Arduino", "Arduino")
                        .WithMany("ArduinoDatas")
                        .HasForeignKey("ArduinoId");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.ClimaticFactor", b =>
                {
                    b.HasOne("Cafe.Climate.Domain.Entities.Monitoring", "Monitoring")
                        .WithMany("Climate")
                        .HasForeignKey("MonitoringId");
                });

            modelBuilder.Entity("Cafe.Climate.Domain.Entities.Monitoring", b =>
                {
                    b.HasOne("Cafe.Climate.Domain.Entities.Crop", "Crop")
                        .WithOne("Monitoring")
                        .HasForeignKey("Cafe.Climate.Domain.Entities.Monitoring", "CropId");
                });
#pragma warning restore 612, 618
        }
    }
}
